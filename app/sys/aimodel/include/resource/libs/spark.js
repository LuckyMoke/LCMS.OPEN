LCMS.plugin.aimodel=Object.assign(LCMS.plugin.aimodel,{request:function(opts){if(!this.apicfg){return false}let data,messages=[],getSparkUrl=()=>{let path="";switch(this.apicfg.model){case"lite":path="/v1.1/chat";break;case"generalv3":path="/v3.1/chat";break;case"generalv3.5":path="/v3.5/chat";break;case"4.0Ultra":path="/v4.0/chat";break}return new Promise(((resolve,reject)=>{LCMS.util.load({src:`${LCMS.url.static}plugin/crypto-js.min.js`,onload:()=>{let host=this.apicfg.api;let date=(new Date).toGMTString();let algorithm="hmac-sha256";let headers="host date request-line";let signatureOrigin=`host: ${host}\ndate: ${date}\nGET ${path} HTTP/1.1`;let signatureSha=CryptoJS.HmacSHA256(signatureOrigin,this.apicfg.apisecret);let signature=CryptoJS.enc.Base64.stringify(signatureSha);let authorizationOrigin=`api_key="${this.apicfg.apikey}", algorithm="${algorithm}", headers="${headers}", signature="${signature}"`;let authorization=btoa(authorizationOrigin);let url=`wss://${this.apicfg.api}${path}?authorization=${authorization}&date=${encodeURIComponent(date)}&host=${host}`;resolve(url)}})}))};if(opts.system){messages.push({role:"system",content:opts.system})}messages=messages.concat(opts.messages);getSparkUrl().then((url=>{let WS;if("WebSocket"in window){WS=new WebSocket(url)}else if("MozWebSocket"in window){WS=new MozWebSocket(url)}else{alert("浏览器不支持WebSocket");return}WS.onopen=res=>{WS.send(JSON.stringify({header:{app_id:this.apicfg.appid},parameter:{chat:{domain:this.apicfg.model,temperature:0.9,max_tokens:this.apicfg.max_tokens}},payload:{message:{text:messages}}}))};WS.onmessage=res=>{data=JSON.parse(res.data);if(0!==data.header.code){opts.onerror&&opts.onerror(res);LCMS.util.notify({type:"error",content:`${data.header.code}:${data.header.message}`});return}if(0===data.header.code&&2===data.header.status){WS.close()}opts.onmessage&&opts.onmessage({content:data.payload.choices.text[0].content})};WS.onerror=error=>{opts.onerror&&opts.onerror(error);LCMS.util.notify({type:"error",content:"WebSocket请求失败"})};WS.onclose=()=>{opts.onclose&&opts.onclose()}}))}});